use "../library/split.gph"
use "../library/range.gph"

Matrix {
	height, width : int = 0;
	data : [[int]] = [];
}

sub read_matrix() : Matrix {
	input : string;
	row, column : int = 0;
	last_width : int = 0;
	mat : Matrix;

	read input;
	while (input != "") {
		add [] in mat{data};
		nums : [string] = split(input, ' ');
		column = 0;
		for n over nums {
			add n@int in mat{data}[row];
			column = column + 1;
		}

		if (row > 0 and column != last_width) {
			println "Invalid matrix\n";
			return Matrix{};
		}
		last_width = column;
		row = row + 1;
		read input;
	}

	mat{height} = row;
	mat{width} = last_width;
	return mat;
}

sub multiply_matrices(m1, m2 : Matrix&) : Matrix {
	result : Matrix;
	if (m1{width} != m2{height}) {
		println "Can't multiply matrices\n";
		return result;
	}

	for i over range(m1{height}) {
		result_row : [int] = [];
		for j over range(m2{width}) {
			add 0 in result_row;
			for k over range(m1{width}) {
				result_row[j] = result_row[j] +
					(m1{data}[i][k] * m2{data}[k][j]);
			}
		}
		add result_row in result{data};
	}

	result{height} = m1{height};
	result{width} = m2{width};
    return result;
}

sub add_matrices(m1, m2 : Matrix&) : Matrix {
	result : Matrix;
	if (m1{height} != m2{height} or m1{width} != m2{width}) {
		println "Can't add matrices\n";
		return result;
	}

	for i over range(m1{height}) {
		add
			[m1{data}[i][j] + m2{data}[i][j] for j over range(m1{width})]
		in result{data};
	}

	result{height} = m1{height};
	result{width} = m1{width};
    return result;
}

sub print_matrix(m : Matrix&) {
	println m{height}@string + ", " + m{width}@string;
	for row over m{data} {
		for cell over row
			print cell@string+" ";
		println "";
	}
	println "";
}

m1, m2 : Matrix;

while (m1{height} == 0) {
	println "Input first matrix:";
	m1 = read_matrix();
}
print_matrix(m1);

while (m2{height} == 0) {
	println "Input second matrix:";
	m2 = read_matrix();
}
print_matrix(m2);

println "Sum of matrices:";
r1 : Matrix = add_matrices(m1, m2);
if (r1{height} > 0) print_matrix(r1);

println "Product of matrices:";
r2 : Matrix = multiply_matrices(m1, m2);
if (r2{height} > 0) print_matrix(r2);
